# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --self-contained -r win-x64
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Dotnet Publish
      run: dotnet publish -c Release --self-contained -r win-x64 -o ./artifact --no-restore --no-build

    - name: test
      run: ls -la

    - uses: actions/checkout@master
    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.5
      with:
        type: 'zip'
        path: './artifact'
        filename: 'release.zip'

    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.4.3
      with:
        name: publish
        path: ./artifact/release.zip

    - name: Database Version
      id: db-version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"

    
    # - name: Create Draft Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: db-version.output.version
    #     release_name: db-version.output.version
    #     draft: true
    #     prerelease: false

    # - uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./artifact/release.zip
    #     asset_name: release.zip
    #     asset_content_type: application/zip

    # - uses: eregon/publish-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     release_id: ${{ steps.create_release.outputs.id }}
